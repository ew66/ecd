# Author: Alfred Jen-Chieh Haung
# Purpose: A powerful replacement for cd (change directory)
unset ECD_TEMP_FILE_PATH
ECD_TEMP_FILE_PATH=$HOME"/.ecd_temp"

# Global variables
declare -i ECD_MAX_HISTORY_NUM=32
declare -i ECD_HISTORY_LIST_CNT=0
declare -a ECD_HISTORY_LIST
declare -i __ECD_DEBUG__=0

# Just a copy of echo
function decho () {

    if (( "$__ECD_DEBUG__" == 1 )); then
        echo "$1"
    fi
}

# Takes no PARAMETERs
# Will put an asterisk after PWD
function draw_menu () {

    declare -i idx=0    
    decho "$PWD"

    for ((idx=0; idx<$ECD_HISTORY_LIST_CNT; idx++))
    do
        if [ "$PWD" == ${ECD_HISTORY_LIST[$idx]} ]; then
            # for Linux
            # echo -e "\e[31;43m$idx)\t${ECD_HISTORY_LIST[$idx]}\e[00m"
            # for Mac OS X
            echo -e "\033[38;5;227m$idx)\t${ECD_HISTORY_LIST[$idx]}\033[00m"
        else
            # for Linux
            # echo -e "\e[91m$idx)\t${ECD_HISTORY_LIST[$idx]}\e[00m"
            # for Mac OS X
            echo -e "\033[38;5;146m$idx)\t${ECD_HISTORY_LIST[$idx]}\033[00m"
        fi
    done
}

# $1: the string to be put to the last position
function write_file () {

    # local variables
    let array_end=$ECD_HISTORY_LIST_CNT
    let array_start=0

    decho "write file: $1"

    # clear file 
    > "$ECD_TEMP_FILE_PATH"

    # determine start position of the list
    if (( "$ECD_HISTORY_LIST_CNT" > "$ECD_MAX_HISTORY_NUM" )); then                    
        let array_start=$ECD_HISTORY_LIST_CNT-$ECD_MAX_HISTORY_NUM        
    fi           

    # Reorganize the list. "$1" will be put in the end of the list
    decho "$array_start, $array_end"
    for ((c=$array_start; c<$array_end; c++))
    do                
        # force reorder
        if [ "${ECD_HISTORY_LIST[$c]}" != "$1" ]; then
            echo "${ECD_HISTORY_LIST[$c]}" >> "$ECD_TEMP_FILE_PATH"
            decho "$c, ${ECD_HISTORY_LIST[$c]}"
        fi
    done

    # Special processing: Used for -r mode 
    if [ "$1" != "" ]; then 
        echo "$1" >> "$ECD_TEMP_FILE_PATH"
    fi

    decho "$1"
}

# Takes no PARAMETERs
# Just print out the usage function
function usage {
    echo "Usage: ecd [ -i | -b [Index] | -s | -l | -h | -r [Index] | -[Index] | [DIRECTORY] ]"
    echo "       -i: interactive mode"
    echo "       -b: branch mode, [Index]: 0..Current History Count"
    echo "       -l: list the history"
    echo "       -s: sort list"
    echo "       -h: display this information"
    echo "       -r: remove a certain index"
    echo "       -[NUMBER]: go to index NUMBER"
    echo "       [DIRECTORY]: go to DIRECTORY"
}

function ecd {
    # Local variables
    TMP_PATH=""
    PARAM_01="$1"
    PARAM_02="$2"

    # init variables
    unset ECD_HISTORY_LIST
    let ECD_HISTORY_LIST_CNT=0

    # Translate PWD
    pwdFullPath=$(greadlink -f $PWD)

    # Step 0. Just by pass '-', the user knows what he is doing.
    if [ "$PARAM_01" == "-" ]; then
        cd -
        return $TRUE
    fi

    # to simulate cd: when no param, go $HOME
    if [ "$PARAM_01" == "" ]; then
        PARAM_01="$HOME"
    fi

    # Step 1. Check the temp file path
    if [ "$ECD_TEMP_FILE_PATH" == "" ]; then
        TMP_PATH=$(mktemp)
        export ECD_TEMP_FILE_PATH=$TMP_PATH
    else                        
        # Read the temp file, and initialize the history array      
        while read line
        do
            ECD_HISTORY_LIST[$ECD_HISTORY_LIST_CNT]=$line
            let ECD_HISTORY_LIST_CNT=$ECD_HISTORY_LIST_CNT+1
        done < "$ECD_TEMP_FILE_PATH"
    fi

    # special handling: fast mode ecd -[number] equals ecd -b [number]
    if [[ "${#PARAM_01}" -gt 1 ]]; then
        if [ "${PARAM_01:0:1}" == "-" ]; then
            subPARAM_01=${PARAM_01:1}           
            if [[ "${#subPARAM_01}" -gt 0 ]]; then 
                if [[ ! $subPARAM_01 = *[^0-9]* ]]; then                          
                    PARAM_02=$subPARAM_01
                    PARAM_01="-b"
                fi
            fi  
        fi
    fi

    # debug 
    #echo $ECD_TEMP_FILE_PATH

    # Step 2. Check the input param
    # if no param
    #   display the content of the history
    #   wait for user choice
    # else 
    #    check the existance of the directory
    #       if (ok)
    #           Goto the directory 
    #           save the path to history
    #       else
    #           DONT do anything.

    # List mode, do nothing but listing 
    if [ "$PARAM_01" == "-l" ]; then

        # Error Handling
        if [[ ( $ECD_HISTORY_LIST_CNT == 0 ) ]]; then
            echo "[INFO] empty history list"
            return $TRUE 
        fi
        
        draw_menu        

    # Sort the list
    elif [ "$PARAM_01" == "-s" ]; then
        
        # Error Handling
        if [[ ( $ECD_HISTORY_LIST_CNT == 0 ) ]]; then
            echo "[INFO] empty history list"
            return $TRUE 
        fi
        sort $ECD_TEMP_FILE_PATH -o $ECD_TEMP_FILE_PATH


    # branch mode, just go to where you want
    elif [ "$PARAM_01" == "-b" ]; then

        # error check
        if [ "$PARAM_02" == "" ]; then
            echo "[ERROR] no index specified"
            usage
            return $TRUE
        fi

        # check param 2 format
        if [[ $PARAM_02 = *[^0-9]* ]]; then
            echo "[ERROR] INCORRECT index"
            return $TRUE
        fi

        let userIdx=$PARAM_02
               
        # in BRANCH mode, we do not offer reordering for advanced users
        if (( "$userIdx" >= "$ECD_HISTORY_LIST_CNT" )); then
            echo "[ERROR] Index out of range"
            return $TRUE
        fi                      

        cd "${ECD_HISTORY_LIST[$userIdx]}"
        return $TRUE

    # removal mode, remove a certain index
    elif [ "$PARAM_01" == "-r" ]; then

        # error check
        if [ "$PARAM_02" == "" ]; then
            echo "[ERROR] no index specified"
            return $TRUE
        fi

        # Special function for "-r all"
        if [ "$PARAM_02" == "all" ]; then
            > "$ECD_TEMP_FILE_PATH"
            return $TRUE
        fi
 
        # Check param 2 format
        if [[ $PARAM_02 = *[^0-9]* ]]; then
            echo "[ERROR] INVALID index, must be digits"
            return $TRUE
        fi

        let userIdx=$PARAM_02
               
        # in BRANCH mode, we do not offer reordering for advanced users
        if (( "$userIdx" >= "$ECD_HISTORY_LIST_CNT" )); then
            echo "[ERROR] index out of range"
            return $TRUE
        fi                      

        unset ECD_HISTORY_LIST[$userIdx]
        write_file

    elif [ "$PARAM_01" == "-i" ]; then
        
        if (( "$ECD_HISTORY_LIST_CNT" == 0 )); then
            echo "[ERROR] Empty history"
            return $TRUE 
        fi
        
        # Wait for user input
        draw_menu                       
        # for Linux
        # echo -e "q)\t\e[7mExit\e[00m\n"
        # for Mac OS X
        echo -e "q)\t\033[7mExit\033[00m\n"
        read -p "Enter your choice:" input

        if [ "$input" == "q" ]; then
            return $TRUE
        fi

        # Check if user input is NUMBER
        if [[ $input = *[^0-9]* ]]; then
             echo "[ERROR] '$input' is not a number."
             return $TRUE    
        fi

        decho "$input, $ECD_HISTORY_LIST_CNT"
        if (( "$input" >= "$ECD_HISTORY_LIST_CNT" )); then
            echo "[ERROR] invalid index - out of range"
            return $TRUE
        fi

        if [ "$pwdFullPath" == "${ECD_HISTORY_LIST[$input]}" ]; then
            return $TRUE
        fi

        # update temp file (reorder is needed)
        fullPath=${ECD_HISTORY_LIST[$input]}
        write_file "$fullPath"
        cd "$fullPath"
    
    elif [ "$PARAM_01" == "-h" ]; then
        usage
        return $TRUE            
    else
        # check if the directory exists
        if [ -d "$PARAM_01" ]; then 

            # write the temp file
            fullPath=$(greadlink -f $PARAM_01)
            
            # Add to the tail of the list
            ECD_HISTORY_LIST[$ECD_HISTORY_LIST_CNT]=$fullPath
            let ECD_HISTORY_LIST_CNT=$ECD_HISTORY_LIST_CNT+1

            # update temp file (reorder is needed)
            write_file "$fullPath"
            cd "$fullPath"
        else
            echo "[INFO] The directory does NOT exist"
            return $TRUE    
        fi 
    fi
}

# alias cd='ecd'

